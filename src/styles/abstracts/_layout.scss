/*
  ========================================
  $Layout
  ========================================
*/

:root {
  --screen: 1024px;
  --screen-l: 1280px;
  --s-header: 8vh;
  --s-sm: clamp(0.5rem, calc(0.318rem + 0.909vw), 1rem);
  --s-base: clamp(1rem, calc(0.636rem + 1.818vw), 2rem);
  --s-md: clamp(1.5rem, calc(1.318rem + 0.909vw), 2rem); // 20 - 32
  --s-lg: clamp(1.5rem, calc(0.955rem + 2.727vw), 3rem); // 24 - 48
  --s-xl: clamp(2rem, calc(1.273rem + 3.636vw), 4rem); // 32 - 64
  --s-xxl: clamp(3rem, calc(1.909rem + 5.455vw), 6rem); // 48 - 96
  --s-xxxl: clamp(5rem, calc(3.182rem + 9.091vw), 10rem); // 80 - 160
}

/* $Global
   ==================================== */

html {
  height: 100%;
}

body {
  overflow-x: hidden;
  height: 100vh;
  min-width: 300px;
  display: grid;
  //grid-template-rows: auto 1fr 115px minmax(0, 1fr);
  overscroll-behavior: none;
  margin: 0;
}

/* Set display: none on line reaks used as spacing
   prevent CMS users from using extra line breaks for spacing */
br + br {
  display: none;
}

header,
main,
section,
article,
div,
aside,
footer {
  box-sizing: border-box;
}

main,
aside,
footer {
  padding: var(--inset);
  margin: var(--outset);
  max-width: 100vw;
}

.section--top {
  position: relative;
  top: calc(2 * var(--s-header));
}

.layout--center {
  --outset: 0 auto;
  max-width: var(--screen);
}
.layout--large {
  --outset: 0 auto;
  max-width: var(--screen-l);
}
.layout--full {
  --inset: 0;
}

.has--no-scroll {
  height: 100%;
  overflow-y: hidden;
}

/* $Breakpoints
   ==================================== */

@mixin bp($point) {
  @if $point == large {
    @media screen and (width > 1024px) {
      @content;
    }
  } @else if $point == medium {
    @media screen and (768px <= width <= 1024px) {
      @content;
    }
  } @else if $point == small {
    @media screen and (width < 768px) {
      @content;
    }
  } @else if $point == medium/large {
    @media screen and (width >= 768px) {
      @content;
    }
  }
}

// @use "../../styles/abstracts/index.scss" as a;
// @include a.bp(medium) {}

// add containers bp

/* $Flex
   ==================================== */

// basic flex layout
%flex {
  display: flex;
  flex-wrap: wrap;
  justify-content: var(--justify);
  align-items: center;
  gap: var(--gap);
}

%flex-large {
  @include bp(large) {
    display: flex;
    flex-wrap: wrap;
    justify-content: var(--justify);
    align-items: center;
    gap: var(--gap);
  }
}

// for auto cols design - use %flex
%flex-auto {
  display: flex;
  flex-wrap: wrap;
  gap: var(--gap);
  justify-content: var(--justify);
  > :where(*) {
    flex: 1 1 var(--width);
  }
}

// suppr
%flex-mobile {
  display: flex;
  flex-direction: column;
  gap: var(--gap);
  justify-content: var(--justify);
  @include bp(medium/large) {
    flex-direction: row;
    flex-wrap: wrap;
  }
}

%flex-column {
  display: flex;
  flex-direction: column;
  gap: var(--gap);
  //padding: var(--inset);
  justify-content: var(--justify);
}

/* $Grid
   ==================================== */

// basic grid layout
%grid {
  display: grid;
  grid-template-columns: repeat(var(--cols), 1fr);
  grid-template-rows: repeat(var(--rows), 1fr);
  gap: var(--gap);
}

// for auto cols design
%grid-auto {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(min(var(--width), 100%), 1fr));
  gap: var(--gap);
}

%grid-fr {
  display: grid;
  gap: var(--gap);
  grid-template-columns: var(--cols); // 3fr 1fr
  grid-template-rows: var(--rows); // 1fr auto
  /*   grid-template-areas:
    "list image"
    "text text"; */
}

// to test for a card with img
.card-media {
  display: grid;
  gap: var(--gap);
  grid-template-columns: fit-content(200px) 1fr;
  grid-template-rows: 1fr auto;
  grid-template-areas:
    "image content"
    "image footer";
  margin-bottom: 4em;
}

/* $Gallery Area
   ==================================== */

/* .panel {
  --gap: var(--s-md);
} */

/* $Helpers
   ==================================== */

%grid--centered {
  display: grid;
  place-content: center;
  text-align: center;
}

%flex--centered {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

%flex--self {
  margin-left: auto;
}

// Trick : apply space to a grid parent
.grid-parent {
  --inset: var(--s-base);
  height: 100%;
  box-sizing: content-box;
}
